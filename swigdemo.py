# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_swigdemo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_swigdemo')
    _swigdemo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swigdemo', [dirname(__file__)])
        except ImportError:
            import _swigdemo
            return _swigdemo
        try:
            _mod = imp.load_module('_swigdemo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _swigdemo = swig_import_helper()
    del swig_import_helper
else:
    import _swigdemo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

TIMESTAMP_SIZE_B = _swigdemo.TIMESTAMP_SIZE_B
GPS_DATA_LENGTH_B = _swigdemo.GPS_DATA_LENGTH_B
DATA_RATE_LENGTH_B = _swigdemo.DATA_RATE_LENGTH_B
NBR_PAA_TEMPERATURES = _swigdemo.NBR_PAA_TEMPERATURES
VER_INFO_SIZE_B = _swigdemo.VER_INFO_SIZE_B
UART_PACKET_TYPE_START_VALUE = _swigdemo.UART_PACKET_TYPE_START_VALUE
POWER_AND_ENERGY = _swigdemo.POWER_AND_ENERGY
TEMPERATURE = _swigdemo.TEMPERATURE
GPS = _swigdemo.GPS
DATARATE = _swigdemo.DATARATE
PAA_TEMPERATURE = _swigdemo.PAA_TEMPERATURE
IDL_REQUEST = _swigdemo.IDL_REQUEST
STD_REQUEST = _swigdemo.STD_REQUEST
ATX_REQUEST = _swigdemo.ATX_REQUEST
ARX_REQUEST = _swigdemo.ARX_REQUEST
VER_REQUEST = _swigdemo.VER_REQUEST
FLT_REQUEST = _swigdemo.FLT_REQUEST
OFF_REQUEST = _swigdemo.OFF_REQUEST
PACKET_ERROR_RATE = _swigdemo.PACKET_ERROR_RATE
PACKETS_PER_SECOND = _swigdemo.PACKETS_PER_SECOND
IDL_ACK = _swigdemo.IDL_ACK
STD_ACK = _swigdemo.STD_ACK
ATX_ACK = _swigdemo.ATX_ACK
ARX_ACK = _swigdemo.ARX_ACK
VER_ACK = _swigdemo.VER_ACK
FLT_ACK = _swigdemo.FLT_ACK
OFF_ACK = _swigdemo.OFF_ACK
IDL_STE = _swigdemo.IDL_STE
STD_STE = _swigdemo.STD_STE
ACT_STE = _swigdemo.ACT_STE
INVALID = _swigdemo.INVALID
UART_PACKET_TYPE_END_VALUE = _swigdemo.UART_PACKET_TYPE_END_VALUE
class PAAPsT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAAPsT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAAPsT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t0"] = _swigdemo.PAAPsT_t0_set
    __swig_getmethods__["t0"] = _swigdemo.PAAPsT_t0_get
    if _newclass:
        t0 = _swig_property(_swigdemo.PAAPsT_t0_get, _swigdemo.PAAPsT_t0_set)
    __swig_setmethods__["t1"] = _swigdemo.PAAPsT_t1_set
    __swig_getmethods__["t1"] = _swigdemo.PAAPsT_t1_get
    if _newclass:
        t1 = _swig_property(_swigdemo.PAAPsT_t1_get, _swigdemo.PAAPsT_t1_set)

    def __init__(self):
        this = _swigdemo.new_PAAPsT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PAAPsT
    __del__ = lambda self: None
PAAPsT_swigregister = _swigdemo.PAAPsT_swigregister
PAAPsT_swigregister(PAAPsT)

class UartPacketHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UartPacketHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UartPacketHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _swigdemo.UartPacketHeader_type_set
    __swig_getmethods__["type"] = _swigdemo.UartPacketHeader_type_get
    if _newclass:
        type = _swig_property(_swigdemo.UartPacketHeader_type_get, _swigdemo.UartPacketHeader_type_set)
    __swig_setmethods__["timestamp"] = _swigdemo.UartPacketHeader_timestamp_set
    __swig_getmethods__["timestamp"] = _swigdemo.UartPacketHeader_timestamp_get
    if _newclass:
        timestamp = _swig_property(_swigdemo.UartPacketHeader_timestamp_get, _swigdemo.UartPacketHeader_timestamp_set)

    def __init__(self):
        this = _swigdemo.new_UartPacketHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_UartPacketHeader
    __del__ = lambda self: None
UartPacketHeader_swigregister = _swigdemo.UartPacketHeader_swigregister
UartPacketHeader_swigregister(UartPacketHeader)

class IDLAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDLAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDLAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.IDLAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.IDLAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.IDLAckPacketData_returnCode_get, _swigdemo.IDLAckPacketData_returnCode_set)

    def __init__(self):
        this = _swigdemo.new_IDLAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_IDLAckPacketData
    __del__ = lambda self: None
IDLAckPacketData_swigregister = _swigdemo.IDLAckPacketData_swigregister
IDLAckPacketData_swigregister(IDLAckPacketData)

class STDAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.STDAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.STDAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.STDAckPacketData_returnCode_get, _swigdemo.STDAckPacketData_returnCode_set)

    def __init__(self):
        this = _swigdemo.new_STDAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_STDAckPacketData
    __del__ = lambda self: None
STDAckPacketData_swigregister = _swigdemo.STDAckPacketData_swigregister
STDAckPacketData_swigregister(STDAckPacketData)

class ATXAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ATXAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ATXAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.ATXAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.ATXAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.ATXAckPacketData_returnCode_get, _swigdemo.ATXAckPacketData_returnCode_set)

    def __init__(self):
        this = _swigdemo.new_ATXAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ATXAckPacketData
    __del__ = lambda self: None
ATXAckPacketData_swigregister = _swigdemo.ATXAckPacketData_swigregister
ATXAckPacketData_swigregister(ATXAckPacketData)

class ARXAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARXAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARXAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.ARXAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.ARXAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.ARXAckPacketData_returnCode_get, _swigdemo.ARXAckPacketData_returnCode_set)

    def __init__(self):
        this = _swigdemo.new_ARXAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ARXAckPacketData
    __del__ = lambda self: None
ARXAckPacketData_swigregister = _swigdemo.ARXAckPacketData_swigregister
ARXAckPacketData_swigregister(ARXAckPacketData)

class VERAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VERAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VERAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.VERAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.VERAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.VERAckPacketData_returnCode_get, _swigdemo.VERAckPacketData_returnCode_set)
    __swig_setmethods__["type"] = _swigdemo.VERAckPacketData_type_set
    __swig_getmethods__["type"] = _swigdemo.VERAckPacketData_type_get
    if _newclass:
        type = _swig_property(_swigdemo.VERAckPacketData_type_get, _swigdemo.VERAckPacketData_type_set)
    __swig_setmethods__["verInfo"] = _swigdemo.VERAckPacketData_verInfo_set
    __swig_getmethods__["verInfo"] = _swigdemo.VERAckPacketData_verInfo_get
    if _newclass:
        verInfo = _swig_property(_swigdemo.VERAckPacketData_verInfo_get, _swigdemo.VERAckPacketData_verInfo_set)

    def __init__(self):
        this = _swigdemo.new_VERAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_VERAckPacketData
    __del__ = lambda self: None
VERAckPacketData_swigregister = _swigdemo.VERAckPacketData_swigregister
VERAckPacketData_swigregister(VERAckPacketData)

class FLTAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLTAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLTAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.FLTAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.FLTAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.FLTAckPacketData_returnCode_get, _swigdemo.FLTAckPacketData_returnCode_set)

    def __init__(self):
        this = _swigdemo.new_FLTAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_FLTAckPacketData
    __del__ = lambda self: None
FLTAckPacketData_swigregister = _swigdemo.FLTAckPacketData_swigregister
FLTAckPacketData_swigregister(FLTAckPacketData)

class OFFAckPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFFAckPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OFFAckPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returnCode"] = _swigdemo.OFFAckPacketData_returnCode_set
    __swig_getmethods__["returnCode"] = _swigdemo.OFFAckPacketData_returnCode_get
    if _newclass:
        returnCode = _swig_property(_swigdemo.OFFAckPacketData_returnCode_get, _swigdemo.OFFAckPacketData_returnCode_set)

    def __init__(self):
        this = _swigdemo.new_OFFAckPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_OFFAckPacketData
    __del__ = lambda self: None
OFFAckPacketData_swigregister = _swigdemo.OFFAckPacketData_swigregister
OFFAckPacketData_swigregister(OFFAckPacketData)

class STDStePacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDStePacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDStePacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _swigdemo.STDStePacketData_device_set
    __swig_getmethods__["device"] = _swigdemo.STDStePacketData_device_get
    if _newclass:
        device = _swig_property(_swigdemo.STDStePacketData_device_get, _swigdemo.STDStePacketData_device_set)
    __swig_setmethods__["channel"] = _swigdemo.STDStePacketData_channel_set
    __swig_getmethods__["channel"] = _swigdemo.STDStePacketData_channel_get
    if _newclass:
        channel = _swig_property(_swigdemo.STDStePacketData_channel_get, _swigdemo.STDStePacketData_channel_set)

    def __init__(self):
        this = _swigdemo.new_STDStePacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_STDStePacketData
    __del__ = lambda self: None
STDStePacketData_swigregister = _swigdemo.STDStePacketData_swigregister
STDStePacketData_swigregister(STDStePacketData)

class ACTStePacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACTStePacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACTStePacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _swigdemo.ACTStePacketData_mode_set
    __swig_getmethods__["mode"] = _swigdemo.ACTStePacketData_mode_get
    if _newclass:
        mode = _swig_property(_swigdemo.ACTStePacketData_mode_get, _swigdemo.ACTStePacketData_mode_set)
    __swig_setmethods__["channel"] = _swigdemo.ACTStePacketData_channel_set
    __swig_getmethods__["channel"] = _swigdemo.ACTStePacketData_channel_get
    if _newclass:
        channel = _swig_property(_swigdemo.ACTStePacketData_channel_get, _swigdemo.ACTStePacketData_channel_set)

    def __init__(self):
        this = _swigdemo.new_ACTStePacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ACTStePacketData
    __del__ = lambda self: None
ACTStePacketData_swigregister = _swigdemo.ACTStePacketData_swigregister
ACTStePacketData_swigregister(ACTStePacketData)

class STDRequestPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDRequestPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDRequestPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _swigdemo.STDRequestPacketData_device_set
    __swig_getmethods__["device"] = _swigdemo.STDRequestPacketData_device_get
    if _newclass:
        device = _swig_property(_swigdemo.STDRequestPacketData_device_get, _swigdemo.STDRequestPacketData_device_set)
    __swig_setmethods__["channel"] = _swigdemo.STDRequestPacketData_channel_set
    __swig_getmethods__["channel"] = _swigdemo.STDRequestPacketData_channel_get
    if _newclass:
        channel = _swig_property(_swigdemo.STDRequestPacketData_channel_get, _swigdemo.STDRequestPacketData_channel_set)

    def __init__(self):
        this = _swigdemo.new_STDRequestPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_STDRequestPacketData
    __del__ = lambda self: None
STDRequestPacketData_swigregister = _swigdemo.STDRequestPacketData_swigregister
STDRequestPacketData_swigregister(STDRequestPacketData)

class ATXRequestPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ATXRequestPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ATXRequestPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mcs"] = _swigdemo.ATXRequestPacketData_mcs_set
    __swig_getmethods__["mcs"] = _swigdemo.ATXRequestPacketData_mcs_get
    if _newclass:
        mcs = _swig_property(_swigdemo.ATXRequestPacketData_mcs_get, _swigdemo.ATXRequestPacketData_mcs_set)
    __swig_setmethods__["channel"] = _swigdemo.ATXRequestPacketData_channel_set
    __swig_getmethods__["channel"] = _swigdemo.ATXRequestPacketData_channel_get
    if _newclass:
        channel = _swig_property(_swigdemo.ATXRequestPacketData_channel_get, _swigdemo.ATXRequestPacketData_channel_set)
    __swig_setmethods__["tx_eirp"] = _swigdemo.ATXRequestPacketData_tx_eirp_set
    __swig_getmethods__["tx_eirp"] = _swigdemo.ATXRequestPacketData_tx_eirp_get
    if _newclass:
        tx_eirp = _swig_property(_swigdemo.ATXRequestPacketData_tx_eirp_get, _swigdemo.ATXRequestPacketData_tx_eirp_set)

    def __init__(self):
        this = _swigdemo.new_ATXRequestPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ATXRequestPacketData
    __del__ = lambda self: None
ATXRequestPacketData_swigregister = _swigdemo.ATXRequestPacketData_swigregister
ATXRequestPacketData_swigregister(ATXRequestPacketData)

class ARXRequestPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARXRequestPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARXRequestPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mcs"] = _swigdemo.ARXRequestPacketData_mcs_set
    __swig_getmethods__["mcs"] = _swigdemo.ARXRequestPacketData_mcs_get
    if _newclass:
        mcs = _swig_property(_swigdemo.ARXRequestPacketData_mcs_get, _swigdemo.ARXRequestPacketData_mcs_set)
    __swig_setmethods__["channel"] = _swigdemo.ARXRequestPacketData_channel_set
    __swig_getmethods__["channel"] = _swigdemo.ARXRequestPacketData_channel_get
    if _newclass:
        channel = _swig_property(_swigdemo.ARXRequestPacketData_channel_get, _swigdemo.ARXRequestPacketData_channel_set)
    __swig_setmethods__["manual_auto"] = _swigdemo.ARXRequestPacketData_manual_auto_set
    __swig_getmethods__["manual_auto"] = _swigdemo.ARXRequestPacketData_manual_auto_get
    if _newclass:
        manual_auto = _swig_property(_swigdemo.ARXRequestPacketData_manual_auto_get, _swigdemo.ARXRequestPacketData_manual_auto_set)
    __swig_setmethods__["rx_gain"] = _swigdemo.ARXRequestPacketData_rx_gain_set
    __swig_getmethods__["rx_gain"] = _swigdemo.ARXRequestPacketData_rx_gain_get
    if _newclass:
        rx_gain = _swig_property(_swigdemo.ARXRequestPacketData_rx_gain_get, _swigdemo.ARXRequestPacketData_rx_gain_set)

    def __init__(self):
        this = _swigdemo.new_ARXRequestPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ARXRequestPacketData
    __del__ = lambda self: None
ARXRequestPacketData_swigregister = _swigdemo.ARXRequestPacketData_swigregister
ARXRequestPacketData_swigregister(ARXRequestPacketData)

class VERRequestPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VERRequestPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VERRequestPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _swigdemo.VERRequestPacketData_type_set
    __swig_getmethods__["type"] = _swigdemo.VERRequestPacketData_type_get
    if _newclass:
        type = _swig_property(_swigdemo.VERRequestPacketData_type_get, _swigdemo.VERRequestPacketData_type_set)

    def __init__(self):
        this = _swigdemo.new_VERRequestPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_VERRequestPacketData
    __del__ = lambda self: None
VERRequestPacketData_swigregister = _swigdemo.VERRequestPacketData_swigregister
VERRequestPacketData_swigregister(VERRequestPacketData)

class FLTRequestPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLTRequestPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLTRequestPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fault"] = _swigdemo.FLTRequestPacketData_fault_set
    __swig_getmethods__["fault"] = _swigdemo.FLTRequestPacketData_fault_get
    if _newclass:
        fault = _swig_property(_swigdemo.FLTRequestPacketData_fault_get, _swigdemo.FLTRequestPacketData_fault_set)

    def __init__(self):
        this = _swigdemo.new_FLTRequestPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_FLTRequestPacketData
    __del__ = lambda self: None
FLTRequestPacketData_swigregister = _swigdemo.FLTRequestPacketData_swigregister
FLTRequestPacketData_swigregister(FLTRequestPacketData)

class TemperaturePacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperaturePacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemperaturePacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drf26"] = _swigdemo.TemperaturePacketData_drf26_set
    __swig_getmethods__["drf26"] = _swigdemo.TemperaturePacketData_drf26_get
    if _newclass:
        drf26 = _swig_property(_swigdemo.TemperaturePacketData_drf26_get, _swigdemo.TemperaturePacketData_drf26_set)
    __swig_setmethods__["drf38"] = _swigdemo.TemperaturePacketData_drf38_set
    __swig_getmethods__["drf38"] = _swigdemo.TemperaturePacketData_drf38_get
    if _newclass:
        drf38 = _swig_property(_swigdemo.TemperaturePacketData_drf38_get, _swigdemo.TemperaturePacketData_drf38_set)
    __swig_setmethods__["fem26"] = _swigdemo.TemperaturePacketData_fem26_set
    __swig_getmethods__["fem26"] = _swigdemo.TemperaturePacketData_fem26_get
    if _newclass:
        fem26 = _swig_property(_swigdemo.TemperaturePacketData_fem26_get, _swigdemo.TemperaturePacketData_fem26_set)
    __swig_setmethods__["fem38"] = _swigdemo.TemperaturePacketData_fem38_set
    __swig_getmethods__["fem38"] = _swigdemo.TemperaturePacketData_fem38_get
    if _newclass:
        fem38 = _swig_property(_swigdemo.TemperaturePacketData_fem38_get, _swigdemo.TemperaturePacketData_fem38_set)
    __swig_setmethods__["paa26Ps"] = _swigdemo.TemperaturePacketData_paa26Ps_set
    __swig_getmethods__["paa26Ps"] = _swigdemo.TemperaturePacketData_paa26Ps_get
    if _newclass:
        paa26Ps = _swig_property(_swigdemo.TemperaturePacketData_paa26Ps_get, _swigdemo.TemperaturePacketData_paa26Ps_set)
    __swig_setmethods__["paa38Ps"] = _swigdemo.TemperaturePacketData_paa38Ps_set
    __swig_getmethods__["paa38Ps"] = _swigdemo.TemperaturePacketData_paa38Ps_get
    if _newclass:
        paa38Ps = _swig_property(_swigdemo.TemperaturePacketData_paa38Ps_get, _swigdemo.TemperaturePacketData_paa38Ps_set)
    __swig_setmethods__["bpu"] = _swigdemo.TemperaturePacketData_bpu_set
    __swig_getmethods__["bpu"] = _swigdemo.TemperaturePacketData_bpu_get
    if _newclass:
        bpu = _swig_property(_swigdemo.TemperaturePacketData_bpu_get, _swigdemo.TemperaturePacketData_bpu_set)

    def __init__(self):
        this = _swigdemo.new_TemperaturePacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_TemperaturePacketData
    __del__ = lambda self: None
TemperaturePacketData_swigregister = _swigdemo.TemperaturePacketData_swigregister
TemperaturePacketData_swigregister(TemperaturePacketData)

class PerPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["per"] = _swigdemo.PerPacketData_per_set
    __swig_getmethods__["per"] = _swigdemo.PerPacketData_per_get
    if _newclass:
        per = _swig_property(_swigdemo.PerPacketData_per_get, _swigdemo.PerPacketData_per_set)

    def __init__(self):
        this = _swigdemo.new_PerPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PerPacketData
    __del__ = lambda self: None
PerPacketData_swigregister = _swigdemo.PerPacketData_swigregister
PerPacketData_swigregister(PerPacketData)

class PpsPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PpsPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PpsPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pps"] = _swigdemo.PpsPacketData_pps_set
    __swig_getmethods__["pps"] = _swigdemo.PpsPacketData_pps_get
    if _newclass:
        pps = _swig_property(_swigdemo.PpsPacketData_pps_get, _swigdemo.PpsPacketData_pps_set)

    def __init__(self):
        this = _swigdemo.new_PpsPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PpsPacketData
    __del__ = lambda self: None
PpsPacketData_swigregister = _swigdemo.PpsPacketData_swigregister
PpsPacketData_swigregister(PpsPacketData)

class PowerAndEnergyPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerAndEnergyPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PowerAndEnergyPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["power"] = _swigdemo.PowerAndEnergyPacketData_power_set
    __swig_getmethods__["power"] = _swigdemo.PowerAndEnergyPacketData_power_get
    if _newclass:
        power = _swig_property(_swigdemo.PowerAndEnergyPacketData_power_get, _swigdemo.PowerAndEnergyPacketData_power_set)
    __swig_setmethods__["energy"] = _swigdemo.PowerAndEnergyPacketData_energy_set
    __swig_getmethods__["energy"] = _swigdemo.PowerAndEnergyPacketData_energy_get
    if _newclass:
        energy = _swig_property(_swigdemo.PowerAndEnergyPacketData_energy_get, _swigdemo.PowerAndEnergyPacketData_energy_set)

    def __init__(self):
        this = _swigdemo.new_PowerAndEnergyPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PowerAndEnergyPacketData
    __del__ = lambda self: None
PowerAndEnergyPacketData_swigregister = _swigdemo.PowerAndEnergyPacketData_swigregister
PowerAndEnergyPacketData_swigregister(PowerAndEnergyPacketData)

class GpsPacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsPacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsPacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gps"] = _swigdemo.GpsPacketData_gps_set
    __swig_getmethods__["gps"] = _swigdemo.GpsPacketData_gps_get
    if _newclass:
        gps = _swig_property(_swigdemo.GpsPacketData_gps_get, _swigdemo.GpsPacketData_gps_set)

    def __init__(self):
        this = _swigdemo.new_GpsPacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_GpsPacketData
    __del__ = lambda self: None
GpsPacketData_swigregister = _swigdemo.GpsPacketData_swigregister
GpsPacketData_swigregister(GpsPacketData)

class DataRatePacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRatePacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataRatePacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uplink"] = _swigdemo.DataRatePacketData_uplink_set
    __swig_getmethods__["uplink"] = _swigdemo.DataRatePacketData_uplink_get
    if _newclass:
        uplink = _swig_property(_swigdemo.DataRatePacketData_uplink_get, _swigdemo.DataRatePacketData_uplink_set)
    __swig_setmethods__["downlink"] = _swigdemo.DataRatePacketData_downlink_set
    __swig_getmethods__["downlink"] = _swigdemo.DataRatePacketData_downlink_get
    if _newclass:
        downlink = _swig_property(_swigdemo.DataRatePacketData_downlink_get, _swigdemo.DataRatePacketData_downlink_set)

    def __init__(self):
        this = _swigdemo.new_DataRatePacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_DataRatePacketData
    __del__ = lambda self: None
DataRatePacketData_swigregister = _swigdemo.DataRatePacketData_swigregister
DataRatePacketData_swigregister(DataRatePacketData)

class PAATemperaturePacketData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAATemperaturePacketData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAATemperaturePacketData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["paa26"] = _swigdemo.PAATemperaturePacketData_paa26_set
    __swig_getmethods__["paa26"] = _swigdemo.PAATemperaturePacketData_paa26_get
    if _newclass:
        paa26 = _swig_property(_swigdemo.PAATemperaturePacketData_paa26_get, _swigdemo.PAATemperaturePacketData_paa26_set)
    __swig_setmethods__["paa38"] = _swigdemo.PAATemperaturePacketData_paa38_set
    __swig_getmethods__["paa38"] = _swigdemo.PAATemperaturePacketData_paa38_get
    if _newclass:
        paa38 = _swig_property(_swigdemo.PAATemperaturePacketData_paa38_get, _swigdemo.PAATemperaturePacketData_paa38_set)

    def __init__(self):
        this = _swigdemo.new_PAATemperaturePacketData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PAATemperaturePacketData
    __del__ = lambda self: None
PAATemperaturePacketData_swigregister = _swigdemo.PAATemperaturePacketData_swigregister
PAATemperaturePacketData_swigregister(PAATemperaturePacketData)

class PowerAndEnergyPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerAndEnergyPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PowerAndEnergyPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.PowerAndEnergyPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.PowerAndEnergyPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.PowerAndEnergyPacket_header_get, _swigdemo.PowerAndEnergyPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.PowerAndEnergyPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.PowerAndEnergyPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.PowerAndEnergyPacket_data_get, _swigdemo.PowerAndEnergyPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_PowerAndEnergyPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PowerAndEnergyPacket
    __del__ = lambda self: None
PowerAndEnergyPacket_swigregister = _swigdemo.PowerAndEnergyPacket_swigregister
PowerAndEnergyPacket_swigregister(PowerAndEnergyPacket)

class TemperaturePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperaturePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemperaturePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.TemperaturePacket_header_set
    __swig_getmethods__["header"] = _swigdemo.TemperaturePacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.TemperaturePacket_header_get, _swigdemo.TemperaturePacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.TemperaturePacket_data_set
    __swig_getmethods__["data"] = _swigdemo.TemperaturePacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.TemperaturePacket_data_get, _swigdemo.TemperaturePacket_data_set)

    def __init__(self):
        this = _swigdemo.new_TemperaturePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_TemperaturePacket
    __del__ = lambda self: None
TemperaturePacket_swigregister = _swigdemo.TemperaturePacket_swigregister
TemperaturePacket_swigregister(TemperaturePacket)

class GpsPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GpsPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.GpsPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.GpsPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.GpsPacket_header_get, _swigdemo.GpsPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.GpsPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.GpsPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.GpsPacket_data_get, _swigdemo.GpsPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_GpsPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_GpsPacket
    __del__ = lambda self: None
GpsPacket_swigregister = _swigdemo.GpsPacket_swigregister
GpsPacket_swigregister(GpsPacket)

class DataRatePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRatePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataRatePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.DataRatePacket_header_set
    __swig_getmethods__["header"] = _swigdemo.DataRatePacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.DataRatePacket_header_get, _swigdemo.DataRatePacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.DataRatePacket_data_set
    __swig_getmethods__["data"] = _swigdemo.DataRatePacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.DataRatePacket_data_get, _swigdemo.DataRatePacket_data_set)

    def __init__(self):
        this = _swigdemo.new_DataRatePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_DataRatePacket
    __del__ = lambda self: None
DataRatePacket_swigregister = _swigdemo.DataRatePacket_swigregister
DataRatePacket_swigregister(DataRatePacket)

class PAATemperaturePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAATemperaturePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAATemperaturePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.PAATemperaturePacket_header_set
    __swig_getmethods__["header"] = _swigdemo.PAATemperaturePacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.PAATemperaturePacket_header_get, _swigdemo.PAATemperaturePacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.PAATemperaturePacket_data_set
    __swig_getmethods__["data"] = _swigdemo.PAATemperaturePacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.PAATemperaturePacket_data_get, _swigdemo.PAATemperaturePacket_data_set)

    def __init__(self):
        this = _swigdemo.new_PAATemperaturePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PAATemperaturePacket
    __del__ = lambda self: None
PAATemperaturePacket_swigregister = _swigdemo.PAATemperaturePacket_swigregister
PAATemperaturePacket_swigregister(PAATemperaturePacket)

class PerPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.PerPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.PerPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.PerPacket_header_get, _swigdemo.PerPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.PerPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.PerPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.PerPacket_data_get, _swigdemo.PerPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_PerPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PerPacket
    __del__ = lambda self: None
PerPacket_swigregister = _swigdemo.PerPacket_swigregister
PerPacket_swigregister(PerPacket)

class PpsPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PpsPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PpsPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.PpsPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.PpsPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.PpsPacket_header_get, _swigdemo.PpsPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.PpsPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.PpsPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.PpsPacket_data_get, _swigdemo.PpsPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_PpsPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_PpsPacket
    __del__ = lambda self: None
PpsPacket_swigregister = _swigdemo.PpsPacket_swigregister
PpsPacket_swigregister(PpsPacket)

class IDLRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDLRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDLRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.IDLRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.IDLRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.IDLRequestPacket_header_get, _swigdemo.IDLRequestPacket_header_set)

    def __init__(self):
        this = _swigdemo.new_IDLRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_IDLRequestPacket
    __del__ = lambda self: None
IDLRequestPacket_swigregister = _swigdemo.IDLRequestPacket_swigregister
IDLRequestPacket_swigregister(IDLRequestPacket)

class OFFRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFFRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OFFRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.OFFRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.OFFRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.OFFRequestPacket_header_get, _swigdemo.OFFRequestPacket_header_set)

    def __init__(self):
        this = _swigdemo.new_OFFRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_OFFRequestPacket
    __del__ = lambda self: None
OFFRequestPacket_swigregister = _swigdemo.OFFRequestPacket_swigregister
OFFRequestPacket_swigregister(OFFRequestPacket)

class STDRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.STDRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.STDRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.STDRequestPacket_header_get, _swigdemo.STDRequestPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.STDRequestPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.STDRequestPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.STDRequestPacket_data_get, _swigdemo.STDRequestPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_STDRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_STDRequestPacket
    __del__ = lambda self: None
STDRequestPacket_swigregister = _swigdemo.STDRequestPacket_swigregister
STDRequestPacket_swigregister(STDRequestPacket)

class ATXRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ATXRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ATXRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.ATXRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.ATXRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.ATXRequestPacket_header_get, _swigdemo.ATXRequestPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.ATXRequestPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.ATXRequestPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.ATXRequestPacket_data_get, _swigdemo.ATXRequestPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_ATXRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ATXRequestPacket
    __del__ = lambda self: None
ATXRequestPacket_swigregister = _swigdemo.ATXRequestPacket_swigregister
ATXRequestPacket_swigregister(ATXRequestPacket)

class ARXRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARXRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARXRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.ARXRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.ARXRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.ARXRequestPacket_header_get, _swigdemo.ARXRequestPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.ARXRequestPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.ARXRequestPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.ARXRequestPacket_data_get, _swigdemo.ARXRequestPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_ARXRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ARXRequestPacket
    __del__ = lambda self: None
ARXRequestPacket_swigregister = _swigdemo.ARXRequestPacket_swigregister
ARXRequestPacket_swigregister(ARXRequestPacket)

class VERRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VERRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VERRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.VERRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.VERRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.VERRequestPacket_header_get, _swigdemo.VERRequestPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.VERRequestPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.VERRequestPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.VERRequestPacket_data_get, _swigdemo.VERRequestPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_VERRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_VERRequestPacket
    __del__ = lambda self: None
VERRequestPacket_swigregister = _swigdemo.VERRequestPacket_swigregister
VERRequestPacket_swigregister(VERRequestPacket)

class FLTRequestPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLTRequestPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLTRequestPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.FLTRequestPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.FLTRequestPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.FLTRequestPacket_header_get, _swigdemo.FLTRequestPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.FLTRequestPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.FLTRequestPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.FLTRequestPacket_data_get, _swigdemo.FLTRequestPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_FLTRequestPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_FLTRequestPacket
    __del__ = lambda self: None
FLTRequestPacket_swigregister = _swigdemo.FLTRequestPacket_swigregister
FLTRequestPacket_swigregister(FLTRequestPacket)

class IDLAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDLAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDLAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.IDLAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.IDLAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.IDLAckPacket_header_get, _swigdemo.IDLAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.IDLAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.IDLAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.IDLAckPacket_data_get, _swigdemo.IDLAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_IDLAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_IDLAckPacket
    __del__ = lambda self: None
IDLAckPacket_swigregister = _swigdemo.IDLAckPacket_swigregister
IDLAckPacket_swigregister(IDLAckPacket)

class STDAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.STDAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.STDAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.STDAckPacket_header_get, _swigdemo.STDAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.STDAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.STDAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.STDAckPacket_data_get, _swigdemo.STDAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_STDAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_STDAckPacket
    __del__ = lambda self: None
STDAckPacket_swigregister = _swigdemo.STDAckPacket_swigregister
STDAckPacket_swigregister(STDAckPacket)

class ATXAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ATXAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ATXAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.ATXAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.ATXAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.ATXAckPacket_header_get, _swigdemo.ATXAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.ATXAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.ATXAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.ATXAckPacket_data_get, _swigdemo.ATXAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_ATXAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ATXAckPacket
    __del__ = lambda self: None
ATXAckPacket_swigregister = _swigdemo.ATXAckPacket_swigregister
ATXAckPacket_swigregister(ATXAckPacket)

class ARXAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ARXAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ARXAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.ARXAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.ARXAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.ARXAckPacket_header_get, _swigdemo.ARXAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.ARXAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.ARXAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.ARXAckPacket_data_get, _swigdemo.ARXAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_ARXAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ARXAckPacket
    __del__ = lambda self: None
ARXAckPacket_swigregister = _swigdemo.ARXAckPacket_swigregister
ARXAckPacket_swigregister(ARXAckPacket)

class VERAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VERAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VERAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.VERAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.VERAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.VERAckPacket_header_get, _swigdemo.VERAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.VERAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.VERAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.VERAckPacket_data_get, _swigdemo.VERAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_VERAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_VERAckPacket
    __del__ = lambda self: None
VERAckPacket_swigregister = _swigdemo.VERAckPacket_swigregister
VERAckPacket_swigregister(VERAckPacket)

class FLTAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLTAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLTAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.FLTAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.FLTAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.FLTAckPacket_header_get, _swigdemo.FLTAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.FLTAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.FLTAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.FLTAckPacket_data_get, _swigdemo.FLTAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_FLTAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_FLTAckPacket
    __del__ = lambda self: None
FLTAckPacket_swigregister = _swigdemo.FLTAckPacket_swigregister
FLTAckPacket_swigregister(FLTAckPacket)

class OFFAckPacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OFFAckPacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OFFAckPacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.OFFAckPacket_header_set
    __swig_getmethods__["header"] = _swigdemo.OFFAckPacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.OFFAckPacket_header_get, _swigdemo.OFFAckPacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.OFFAckPacket_data_set
    __swig_getmethods__["data"] = _swigdemo.OFFAckPacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.OFFAckPacket_data_get, _swigdemo.OFFAckPacket_data_set)

    def __init__(self):
        this = _swigdemo.new_OFFAckPacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_OFFAckPacket
    __del__ = lambda self: None
OFFAckPacket_swigregister = _swigdemo.OFFAckPacket_swigregister
OFFAckPacket_swigregister(OFFAckPacket)

class IDLStePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDLStePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDLStePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.IDLStePacket_header_set
    __swig_getmethods__["header"] = _swigdemo.IDLStePacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.IDLStePacket_header_get, _swigdemo.IDLStePacket_header_set)

    def __init__(self):
        this = _swigdemo.new_IDLStePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_IDLStePacket
    __del__ = lambda self: None
IDLStePacket_swigregister = _swigdemo.IDLStePacket_swigregister
IDLStePacket_swigregister(IDLStePacket)

class STDStePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDStePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDStePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.STDStePacket_header_set
    __swig_getmethods__["header"] = _swigdemo.STDStePacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.STDStePacket_header_get, _swigdemo.STDStePacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.STDStePacket_data_set
    __swig_getmethods__["data"] = _swigdemo.STDStePacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.STDStePacket_data_get, _swigdemo.STDStePacket_data_set)

    def __init__(self):
        this = _swigdemo.new_STDStePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_STDStePacket
    __del__ = lambda self: None
STDStePacket_swigregister = _swigdemo.STDStePacket_swigregister
STDStePacket_swigregister(STDStePacket)

class ACTStePacket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ACTStePacket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ACTStePacket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _swigdemo.ACTStePacket_header_set
    __swig_getmethods__["header"] = _swigdemo.ACTStePacket_header_get
    if _newclass:
        header = _swig_property(_swigdemo.ACTStePacket_header_get, _swigdemo.ACTStePacket_header_set)
    __swig_setmethods__["data"] = _swigdemo.ACTStePacket_data_set
    __swig_getmethods__["data"] = _swigdemo.ACTStePacket_data_get
    if _newclass:
        data = _swig_property(_swigdemo.ACTStePacket_data_get, _swigdemo.ACTStePacket_data_set)

    def __init__(self):
        this = _swigdemo.new_ACTStePacket()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swigdemo.delete_ACTStePacket
    __del__ = lambda self: None
ACTStePacket_swigregister = _swigdemo.ACTStePacket_swigregister
ACTStePacket_swigregister(ACTStePacket)


def UartPacket_getSize(t):
    return _swigdemo.UartPacket_getSize(t)
UartPacket_getSize = _swigdemo.UartPacket_getSize

def UartPacket_getMaxPacketSize():
    return _swigdemo.UartPacket_getMaxPacketSize()
UartPacket_getMaxPacketSize = _swigdemo.UartPacket_getMaxPacketSize

def UartPacket_initPowerAndEnergyPacket(p):
    return _swigdemo.UartPacket_initPowerAndEnergyPacket(p)
UartPacket_initPowerAndEnergyPacket = _swigdemo.UartPacket_initPowerAndEnergyPacket

def UartPacket_initTemperaturePacket(p):
    return _swigdemo.UartPacket_initTemperaturePacket(p)
UartPacket_initTemperaturePacket = _swigdemo.UartPacket_initTemperaturePacket

def UartPacket_initGpsPacket(p):
    return _swigdemo.UartPacket_initGpsPacket(p)
UartPacket_initGpsPacket = _swigdemo.UartPacket_initGpsPacket

def UartPacket_initDataRatePacket(p):
    return _swigdemo.UartPacket_initDataRatePacket(p)
UartPacket_initDataRatePacket = _swigdemo.UartPacket_initDataRatePacket

def UartPacket_initPAATemperaturePacket(p):
    return _swigdemo.UartPacket_initPAATemperaturePacket(p)
UartPacket_initPAATemperaturePacket = _swigdemo.UartPacket_initPAATemperaturePacket

def UartPacket_initSTDRequestPacket(p):
    return _swigdemo.UartPacket_initSTDRequestPacket(p)
UartPacket_initSTDRequestPacket = _swigdemo.UartPacket_initSTDRequestPacket

def UartPacket_initATXRequestPacket(p):
    return _swigdemo.UartPacket_initATXRequestPacket(p)
UartPacket_initATXRequestPacket = _swigdemo.UartPacket_initATXRequestPacket

def UartPacket_initARXRequestPacket(p):
    return _swigdemo.UartPacket_initARXRequestPacket(p)
UartPacket_initARXRequestPacket = _swigdemo.UartPacket_initARXRequestPacket

def UartPacket_initVERRequestPacket(p):
    return _swigdemo.UartPacket_initVERRequestPacket(p)
UartPacket_initVERRequestPacket = _swigdemo.UartPacket_initVERRequestPacket

def UartPacket_initIDLRequestPacket(p):
    return _swigdemo.UartPacket_initIDLRequestPacket(p)
UartPacket_initIDLRequestPacket = _swigdemo.UartPacket_initIDLRequestPacket

def UartPacket_initFLTRequestPacket(p):
    return _swigdemo.UartPacket_initFLTRequestPacket(p)
UartPacket_initFLTRequestPacket = _swigdemo.UartPacket_initFLTRequestPacket

def UartPacket_initOFFRequestPacket(p):
    return _swigdemo.UartPacket_initOFFRequestPacket(p)
UartPacket_initOFFRequestPacket = _swigdemo.UartPacket_initOFFRequestPacket
LOCALHOST = _swigdemo.LOCALHOST
UART_IP = _swigdemo.UART_IP
UART_PORT = _swigdemo.UART_PORT
REMOTE_HOST_IP = _swigdemo.REMOTE_HOST_IP
REMOTE_HOST_PORT = _swigdemo.REMOTE_HOST_PORT
SENSOR_STREAMER_IP = _swigdemo.SENSOR_STREAMER_IP
SENSOR_STREAMER_PORT = _swigdemo.SENSOR_STREAMER_PORT
PACKETIZER_IP = _swigdemo.PACKETIZER_IP
PACKETIZER_SENSORS_PORT = _swigdemo.PACKETIZER_SENSORS_PORT
PACKETIZER_FS_PORT = _swigdemo.PACKETIZER_FS_PORT
FS_IP = _swigdemo.FS_IP
FS_PORT = _swigdemo.FS_PORT
# This file is compatible with both classic and new-style classes.


